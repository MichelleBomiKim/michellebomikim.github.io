{
  "hash": "1418870a9992b3b4bb7d6e3aa84dc76d",
  "result": {
    "markdown": "---\ntitle: \"assignment 1\"\n---\n\n\n## Quarto\n\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n    # Title Fall color\n    # Credit: https://fronkonstin.com\n\n    # Install packages\n\n    install.packages(\"gsubfn\")\n    install.packages(\"tidyverse\")\n    library(gsubfn)\n    library(tidyverse)\n\n    # Define elements in plant art\n    # Each image corresponds to a different axiom, rules, angle and depth\n\n    # Leaf of Fall\n\n    axiom=\"X\"\n    rules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\n    angle=22.5\n    depth=6\n\n\n    for (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\n    actions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %>% unlist\n\n    status=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\n    points=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n\n    # Generating data\n    # Note: may take a minute or two\n\n    for (action in actions)\n    {\n      if (action==\"F\")\n      {\n        x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n        y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n        points[1,\"x2\"]=x\n        points[1,\"y2\"]=y\n        data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n                   alfa=points[1, \"alfa\"],\n                   depth=points[1,\"depth\"]) %>% rbind(points)->points\n      }\n      if (action %in% c(\"+\", \"-\")){\n        alfa=points[1, \"alfa\"]\n        points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n      }\n      if(action==\"[\"){\n        data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %>%\n          rbind(status) -> status\n        points[1, \"depth\"]=points[1, \"depth\"]+1\n      }\n\n      if(action==\"]\"){\n        depth=points[1, \"depth\"]\n        points[-1,]->points\n        data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n                   alfa=status[1, \"alfa\"],\n                   depth=depth-1) %>%\n          rbind(points) -> points\n        status[-1,]->status\n      }\n    }\n\n    ggplot() +\n      geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n                   lineend = \"round\",\n                   color=\"grey\", # Set your own Fall color?\n                   data=na.omit(points)) +\n      coord_fixed(ratio = 1) +\n      theme_void() # No grid nor axes\n\n\\\n\\# Title Fall color \\# Credit: https://fronkonstin.com\n\n# Install packages\n\ninstall.packages(\"gsubfn\") install.packages(\"tidyverse\") library(gsubfn) library(tidyverse)\n\n# Define elements in plant art\n\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\" rules=list(\"X\"=\"F-\\[\\[X\\]+X\\]+F\\[+FX\\]-X\", \"F\"=\"FF\") angle=22.5 depth=6\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+\\|\\\\d*\\\\-\\|F\\|L\\|R\\|\\\\\\[\\|\\\\\\]\\|\\\\\\|\") %\\>% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0)) points=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n# Generating data\n\n# Note: may take a minute or two\n\nfor (action in actions) { if (action==\"F\") { x=points\\[1, \"x1\"\\]+cos(points\\[1, \"alfa\"\\]*(pi/180)) y=points\\[1, \"y1\"\\]+sin(points\\[1, \"alfa\"\\]*(pi/180)) points\\[1,\"x2\"\\]=x points\\[1,\"y2\"\\]=y data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA, alfa=points\\[1, \"alfa\"\\], depth=points\\[1,\"depth\"\\]) %\\>% rbind(points)-\\>points } if (action %in% c(\"+\", \"-\")){ alfa=points\\[1, \"alfa\"\\] points\\[1, \"alfa\"\\]=eval(parse(text=paste0(\"alfa\",action, angle))) } if(action==\"\\[\"){ data.frame(x=points\\[1, \"x1\"\\], y=points\\[1, \"y1\"\\], alfa=points\\[1, \"alfa\"\\]) %\\>% rbind(status) -\\> status points\\[1, \"depth\"\\]=points\\[1, \"depth\"\\]+1 }\\]\"){ depth=points\\[1,\"depth\"\\] points\\[-1,\\]-\\>points data.frame(x1=status\\[1, \"x\"\\], y1=status\\[1, \"y\"\\], x2=NA, y2=NA, alfa=status\\[1, \"alfa\"\\], depth=depth-1) %\\>% rbind(points) -\\> points status\\[-1,\\]-\\>status } }\n\nggplot() + geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), lineend = \"round\", color=\"burlywood3\", \\# Set your own Fall color? data=na.omit(points)) + coord_fixed(ratio = 1) + theme_void() \\# No grid nor axes\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}